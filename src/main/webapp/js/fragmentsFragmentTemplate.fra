	
	############################################################################
				Configuração do beans.xml referente aos novos serviços.
	############################################################################
	<jaxrs:server id="services" address="/">
		<jaxrs:serviceBeans>
				<bean class="br.com.sints.app.rs.AlunoResources" />
		<bean class="br.com.sints.app.rs.DisciplinaResources" />
		<bean class="br.com.sints.app.rs.ListaResources" />
		<bean class="br.com.sints.app.rs.ProfessorResources" />
		<bean class="br.com.sints.app.rs.QuestaoResources" />
		<bean class="br.com.sints.app.rs.QuestaoDesafioResources" />
		<bean class="br.com.sints.app.rs.RankingResources" />
		<bean class="br.com.sints.app.rs.BairroResources" />
		<bean class="br.com.sints.app.rs.CepResources" />
		<bean class="br.com.sints.app.rs.CidadeResources" />
		<bean class="br.com.sints.app.rs.EnderecoResources" />
		<bean class="br.com.sints.app.rs.EstadoResources" />
		<bean class="br.com.sints.app.rs.PaisResources" />
		<bean class="br.com.sints.app.rs.ClientResources" />
		<bean class="br.com.sints.app.rs.ItemResources" />
		<bean class="br.com.sints.app.rs.ItemTypeResources" />
		<bean class="br.com.sints.app.rs.OperationResources" />
		<bean class="br.com.sints.app.rs.PermissionResources" />
		<bean class="br.com.sints.app.rs.RoleResources" />
		<bean class="br.com.sints.app.rs.SessionResources" />
		<bean class="br.com.sints.app.rs.UserResources" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
		</jaxrs:providers>
	</jaxrs:server>
	
	
	############################################################################
						Router para as entidades criadas
	############################################################################

		var PageAluno = require('views/aluno/PageAluno');
		var FormAluno = require('views/aluno/FormAluno');
		var AlunoModel = require('models/AlunoModel');
		var PageDisciplina = require('views/disciplina/PageDisciplina');
		var FormDisciplina = require('views/disciplina/FormDisciplina');
		var DisciplinaModel = require('models/DisciplinaModel');
		var PageLista = require('views/lista/PageLista');
		var FormLista = require('views/lista/FormLista');
		var ListaModel = require('models/ListaModel');
		var PageProfessor = require('views/professor/PageProfessor');
		var FormProfessor = require('views/professor/FormProfessor');
		var ProfessorModel = require('models/ProfessorModel');
		var PageQuestao = require('views/questao/PageQuestao');
		var FormQuestao = require('views/questao/FormQuestao');
		var QuestaoModel = require('models/QuestaoModel');
		var PageQuestaoDesafio = require('views/questaoDesafio/PageQuestaoDesafio');
		var FormQuestaoDesafio = require('views/questaoDesafio/FormQuestaoDesafio');
		var QuestaoDesafioModel = require('models/QuestaoDesafioModel');
		var PageRanking = require('views/ranking/PageRanking');
		var FormRanking = require('views/ranking/FormRanking');
		var RankingModel = require('models/RankingModel');
		var PageBairro = require('views/bairro/PageBairro');
		var FormBairro = require('views/bairro/FormBairro');
		var BairroModel = require('models/BairroModel');
		var PageCep = require('views/cep/PageCep');
		var FormCep = require('views/cep/FormCep');
		var CepModel = require('models/CepModel');
		var PageCidade = require('views/cidade/PageCidade');
		var FormCidade = require('views/cidade/FormCidade');
		var CidadeModel = require('models/CidadeModel');
		var PageEndereco = require('views/endereco/PageEndereco');
		var FormEndereco = require('views/endereco/FormEndereco');
		var EnderecoModel = require('models/EnderecoModel');
		var PageEstado = require('views/estado/PageEstado');
		var FormEstado = require('views/estado/FormEstado');
		var EstadoModel = require('models/EstadoModel');
		var PagePais = require('views/pais/PagePais');
		var FormPais = require('views/pais/FormPais');
		var PaisModel = require('models/PaisModel');
		var PageClient = require('views/client/PageClient');
		var FormClient = require('views/client/FormClient');
		var ClientModel = require('models/ClientModel');
		var PageItem = require('views/item/PageItem');
		var FormItem = require('views/item/FormItem');
		var ItemModel = require('models/ItemModel');
		var PageItemType = require('views/itemType/PageItemType');
		var FormItemType = require('views/itemType/FormItemType');
		var ItemTypeModel = require('models/ItemTypeModel');
		var PageOperation = require('views/operation/PageOperation');
		var FormOperation = require('views/operation/FormOperation');
		var OperationModel = require('models/OperationModel');
		var PagePermission = require('views/permission/PagePermission');
		var FormPermission = require('views/permission/FormPermission');
		var PermissionModel = require('models/PermissionModel');
		var PageRole = require('views/role/PageRole');
		var FormRole = require('views/role/FormRole');
		var RoleModel = require('models/RoleModel');
		var PageSession = require('views/session/PageSession');
		var FormSession = require('views/session/FormSession');
		var SessionModel = require('models/SessionModel');
		var PageUser = require('views/user/PageUser');
		var FormUser = require('views/user/FormUser');
		var UserModel = require('models/UserModel');
	
			// hashs de Aluno
			'app/alunos' : 'alunos',
			'app/newAluno' : 'newAluno',
			'app/editAluno/:id' : 'editAluno',
			// hashs de Disciplina
			'app/disciplinas' : 'disciplinas',
			'app/newDisciplina' : 'newDisciplina',
			'app/editDisciplina/:id' : 'editDisciplina',
			// hashs de Lista
			'app/listas' : 'listas',
			'app/newLista' : 'newLista',
			'app/editLista/:id' : 'editLista',
			// hashs de Professor
			'app/professors' : 'professors',
			'app/newProfessor' : 'newProfessor',
			'app/editProfessor/:id' : 'editProfessor',
			// hashs de Questao
			'app/questaos' : 'questaos',
			'app/newQuestao' : 'newQuestao',
			'app/editQuestao/:id' : 'editQuestao',
			// hashs de QuestaoDesafio
			'app/questaoDesafios' : 'questaoDesafios',
			'app/newQuestaoDesafio' : 'newQuestaoDesafio',
			'app/editQuestaoDesafio/:id' : 'editQuestaoDesafio',
			// hashs de Ranking
			'app/rankings' : 'rankings',
			'app/newRanking' : 'newRanking',
			'app/editRanking/:id' : 'editRanking',
			// hashs de Bairro
			'app/bairros' : 'bairros',
			'app/newBairro' : 'newBairro',
			'app/editBairro/:id' : 'editBairro',
			// hashs de Cep
			'app/ceps' : 'ceps',
			'app/newCep' : 'newCep',
			'app/editCep/:id' : 'editCep',
			// hashs de Cidade
			'app/cidades' : 'cidades',
			'app/newCidade' : 'newCidade',
			'app/editCidade/:id' : 'editCidade',
			// hashs de Endereco
			'app/enderecos' : 'enderecos',
			'app/newEndereco' : 'newEndereco',
			'app/editEndereco/:id' : 'editEndereco',
			// hashs de Estado
			'app/estados' : 'estados',
			'app/newEstado' : 'newEstado',
			'app/editEstado/:id' : 'editEstado',
			// hashs de Pais
			'app/paiss' : 'paiss',
			'app/newPais' : 'newPais',
			'app/editPais/:id' : 'editPais',
			// hashs de Client
			'app/clients' : 'clients',
			'app/newClient' : 'newClient',
			'app/editClient/:id' : 'editClient',
			// hashs de Item
			'app/items' : 'items',
			'app/newItem' : 'newItem',
			'app/editItem/:id' : 'editItem',
			// hashs de ItemType
			'app/itemTypes' : 'itemTypes',
			'app/newItemType' : 'newItemType',
			'app/editItemType/:id' : 'editItemType',
			// hashs de Operation
			'app/operations' : 'operations',
			'app/newOperation' : 'newOperation',
			'app/editOperation/:id' : 'editOperation',
			// hashs de Permission
			'app/permissions' : 'permissions',
			'app/newPermission' : 'newPermission',
			'app/editPermission/:id' : 'editPermission',
			// hashs de Role
			'app/roles' : 'roles',
			'app/newRole' : 'newRole',
			'app/editRole/:id' : 'editRole',
			// hashs de Session
			'app/sessions' : 'sessions',
			'app/newSession' : 'newSession',
			'app/editSession/:id' : 'editSession',
			// hashs de User
			'app/users' : 'users',
			'app/newUser' : 'newUser',
			'app/editUser/:id' : 'editUser',
			
			//configuração das rotas de Aluno
			appRouter.on('route:alunos', function() {
				util.markActiveItem('alunos');
				appRouter.pageAluno = new PageAluno();
				App.mainRegion.show(appRouter.pageAluno);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Aluno',
					itemSubFolderName : 'Grid',
					url : 'app/alunos'
				});
			});
	
			appRouter.on('route:newAluno', function() {
				util.markActiveItem('alunos');
				var formAluno = new FormAluno({
					model : new AlunoModel(),
				});
				App.mainRegion.show(formAluno);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Aluno',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/alunos'
				});
			});
			
			appRouter.on('route:editAluno', function(idAluno) {
				util.markActiveItem('alunos');
				var formAluno = null;
				if (appRouter.pageAluno) {
					formAluno = new FormAluno({
						model : appRouter.pageAluno.alunos.get(idAluno),
					});
					App.mainRegion.show(formAluno);
				} else {
					var model = new AlunoModel({
						id : idAluno,
					})
					model.fetch({
						success : function(model) {
							formAluno = new FormAluno({
								model : model,
							});
							App.mainRegion.show(formAluno);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Alunoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/alunos'
					});
				}
			});
			//configuração das rotas de Disciplina
			appRouter.on('route:disciplinas', function() {
				util.markActiveItem('disciplinas');
				appRouter.pageDisciplina = new PageDisciplina();
				App.mainRegion.show(appRouter.pageDisciplina);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Disciplina',
					itemSubFolderName : 'Grid',
					url : 'app/disciplinas'
				});
			});
	
			appRouter.on('route:newDisciplina', function() {
				util.markActiveItem('disciplinas');
				var formDisciplina = new FormDisciplina({
					model : new DisciplinaModel(),
				});
				App.mainRegion.show(formDisciplina);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Disciplina',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/disciplinas'
				});
			});
			
			appRouter.on('route:editDisciplina', function(idDisciplina) {
				util.markActiveItem('disciplinas');
				var formDisciplina = null;
				if (appRouter.pageDisciplina) {
					formDisciplina = new FormDisciplina({
						model : appRouter.pageDisciplina.disciplinas.get(idDisciplina),
					});
					App.mainRegion.show(formDisciplina);
				} else {
					var model = new DisciplinaModel({
						id : idDisciplina,
					})
					model.fetch({
						success : function(model) {
							formDisciplina = new FormDisciplina({
								model : model,
							});
							App.mainRegion.show(formDisciplina);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Disciplinaos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/disciplinas'
					});
				}
			});
			//configuração das rotas de Lista
			appRouter.on('route:listas', function() {
				util.markActiveItem('listas');
				appRouter.pageLista = new PageLista();
				App.mainRegion.show(appRouter.pageLista);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Lista',
					itemSubFolderName : 'Grid',
					url : 'app/listas'
				});
			});
	
			appRouter.on('route:newLista', function() {
				util.markActiveItem('listas');
				var formLista = new FormLista({
					model : new ListaModel(),
				});
				App.mainRegion.show(formLista);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Lista',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/listas'
				});
			});
			
			appRouter.on('route:editLista', function(idLista) {
				util.markActiveItem('listas');
				var formLista = null;
				if (appRouter.pageLista) {
					formLista = new FormLista({
						model : appRouter.pageLista.listas.get(idLista),
					});
					App.mainRegion.show(formLista);
				} else {
					var model = new ListaModel({
						id : idLista,
					})
					model.fetch({
						success : function(model) {
							formLista = new FormLista({
								model : model,
							});
							App.mainRegion.show(formLista);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Listaos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/listas'
					});
				}
			});
			//configuração das rotas de Professor
			appRouter.on('route:professors', function() {
				util.markActiveItem('professors');
				appRouter.pageProfessor = new PageProfessor();
				App.mainRegion.show(appRouter.pageProfessor);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Professor',
					itemSubFolderName : 'Grid',
					url : 'app/professors'
				});
			});
	
			appRouter.on('route:newProfessor', function() {
				util.markActiveItem('professors');
				var formProfessor = new FormProfessor({
					model : new ProfessorModel(),
				});
				App.mainRegion.show(formProfessor);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Professor',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/professors'
				});
			});
			
			appRouter.on('route:editProfessor', function(idProfessor) {
				util.markActiveItem('professors');
				var formProfessor = null;
				if (appRouter.pageProfessor) {
					formProfessor = new FormProfessor({
						model : appRouter.pageProfessor.professors.get(idProfessor),
					});
					App.mainRegion.show(formProfessor);
				} else {
					var model = new ProfessorModel({
						id : idProfessor,
					})
					model.fetch({
						success : function(model) {
							formProfessor = new FormProfessor({
								model : model,
							});
							App.mainRegion.show(formProfessor);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Professoros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/professors'
					});
				}
			});
			//configuração das rotas de Questao
			appRouter.on('route:questaos', function() {
				util.markActiveItem('questaos');
				appRouter.pageQuestao = new PageQuestao();
				App.mainRegion.show(appRouter.pageQuestao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Questao',
					itemSubFolderName : 'Grid',
					url : 'app/questaos'
				});
			});
	
			appRouter.on('route:newQuestao', function() {
				util.markActiveItem('questaos');
				var formQuestao = new FormQuestao({
					model : new QuestaoModel(),
				});
				App.mainRegion.show(formQuestao);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Questao',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/questaos'
				});
			});
			
			appRouter.on('route:editQuestao', function(idQuestao) {
				util.markActiveItem('questaos');
				var formQuestao = null;
				if (appRouter.pageQuestao) {
					formQuestao = new FormQuestao({
						model : appRouter.pageQuestao.questaos.get(idQuestao),
					});
					App.mainRegion.show(formQuestao);
				} else {
					var model = new QuestaoModel({
						id : idQuestao,
					})
					model.fetch({
						success : function(model) {
							formQuestao = new FormQuestao({
								model : model,
							});
							App.mainRegion.show(formQuestao);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Questaoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/questaos'
					});
				}
			});
			//configuração das rotas de QuestaoDesafio
			appRouter.on('route:questaoDesafios', function() {
				util.markActiveItem('questaoDesafios');
				appRouter.pageQuestaoDesafio = new PageQuestaoDesafio();
				App.mainRegion.show(appRouter.pageQuestaoDesafio);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'QuestaoDesafio',
					itemSubFolderName : 'Grid',
					url : 'app/questaoDesafios'
				});
			});
	
			appRouter.on('route:newQuestaoDesafio', function() {
				util.markActiveItem('questaoDesafios');
				var formQuestaoDesafio = new FormQuestaoDesafio({
					model : new QuestaoDesafioModel(),
				});
				App.mainRegion.show(formQuestaoDesafio);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'QuestaoDesafio',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/questaoDesafios'
				});
			});
			
			appRouter.on('route:editQuestaoDesafio', function(idQuestaoDesafio) {
				util.markActiveItem('questaoDesafios');
				var formQuestaoDesafio = null;
				if (appRouter.pageQuestaoDesafio) {
					formQuestaoDesafio = new FormQuestaoDesafio({
						model : appRouter.pageQuestaoDesafio.questaoDesafios.get(idQuestaoDesafio),
					});
					App.mainRegion.show(formQuestaoDesafio);
				} else {
					var model = new QuestaoDesafioModel({
						id : idQuestaoDesafio,
					})
					model.fetch({
						success : function(model) {
							formQuestaoDesafio = new FormQuestaoDesafio({
								model : model,
							});
							App.mainRegion.show(formQuestaoDesafio);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'QuestaoDesafioos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/questaoDesafios'
					});
				}
			});
			//configuração das rotas de Ranking
			appRouter.on('route:rankings', function() {
				util.markActiveItem('rankings');
				appRouter.pageRanking = new PageRanking();
				App.mainRegion.show(appRouter.pageRanking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Ranking',
					itemSubFolderName : 'Grid',
					url : 'app/rankings'
				});
			});
	
			appRouter.on('route:newRanking', function() {
				util.markActiveItem('rankings');
				var formRanking = new FormRanking({
					model : new RankingModel(),
				});
				App.mainRegion.show(formRanking);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Ranking',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/rankings'
				});
			});
			
			appRouter.on('route:editRanking', function(idRanking) {
				util.markActiveItem('rankings');
				var formRanking = null;
				if (appRouter.pageRanking) {
					formRanking = new FormRanking({
						model : appRouter.pageRanking.rankings.get(idRanking),
					});
					App.mainRegion.show(formRanking);
				} else {
					var model = new RankingModel({
						id : idRanking,
					})
					model.fetch({
						success : function(model) {
							formRanking = new FormRanking({
								model : model,
							});
							App.mainRegion.show(formRanking);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Rankingos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/rankings'
					});
				}
			});
			//configuração das rotas de Bairro
			appRouter.on('route:bairros', function() {
				util.markActiveItem('bairros');
				appRouter.pageBairro = new PageBairro();
				App.mainRegion.show(appRouter.pageBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Grid',
					url : 'app/bairros'
				});
			});
	
			appRouter.on('route:newBairro', function() {
				util.markActiveItem('bairros');
				var formBairro = new FormBairro({
					model : new BairroModel(),
				});
				App.mainRegion.show(formBairro);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Bairro',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/bairros'
				});
			});
			
			appRouter.on('route:editBairro', function(idBairro) {
				util.markActiveItem('bairros');
				var formBairro = null;
				if (appRouter.pageBairro) {
					formBairro = new FormBairro({
						model : appRouter.pageBairro.bairros.get(idBairro),
					});
					App.mainRegion.show(formBairro);
				} else {
					var model = new BairroModel({
						id : idBairro,
					})
					model.fetch({
						success : function(model) {
							formBairro = new FormBairro({
								model : model,
							});
							App.mainRegion.show(formBairro);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Bairroos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/bairros'
					});
				}
			});
			//configuração das rotas de Cep
			appRouter.on('route:ceps', function() {
				util.markActiveItem('ceps');
				appRouter.pageCep = new PageCep();
				App.mainRegion.show(appRouter.pageCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Grid',
					url : 'app/ceps'
				});
			});
	
			appRouter.on('route:newCep', function() {
				util.markActiveItem('ceps');
				var formCep = new FormCep({
					model : new CepModel(),
				});
				App.mainRegion.show(formCep);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cep',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/ceps'
				});
			});
			
			appRouter.on('route:editCep', function(idCep) {
				util.markActiveItem('ceps');
				var formCep = null;
				if (appRouter.pageCep) {
					formCep = new FormCep({
						model : appRouter.pageCep.ceps.get(idCep),
					});
					App.mainRegion.show(formCep);
				} else {
					var model = new CepModel({
						id : idCep,
					})
					model.fetch({
						success : function(model) {
							formCep = new FormCep({
								model : model,
							});
							App.mainRegion.show(formCep);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cepos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/ceps'
					});
				}
			});
			//configuração das rotas de Cidade
			appRouter.on('route:cidades', function() {
				util.markActiveItem('cidades');
				appRouter.pageCidade = new PageCidade();
				App.mainRegion.show(appRouter.pageCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Grid',
					url : 'app/cidades'
				});
			});
	
			appRouter.on('route:newCidade', function() {
				util.markActiveItem('cidades');
				var formCidade = new FormCidade({
					model : new CidadeModel(),
				});
				App.mainRegion.show(formCidade);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Cidade',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/cidades'
				});
			});
			
			appRouter.on('route:editCidade', function(idCidade) {
				util.markActiveItem('cidades');
				var formCidade = null;
				if (appRouter.pageCidade) {
					formCidade = new FormCidade({
						model : appRouter.pageCidade.cidades.get(idCidade),
					});
					App.mainRegion.show(formCidade);
				} else {
					var model = new CidadeModel({
						id : idCidade,
					})
					model.fetch({
						success : function(model) {
							formCidade = new FormCidade({
								model : model,
							});
							App.mainRegion.show(formCidade);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Cidadeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/cidades'
					});
				}
			});
			//configuração das rotas de Endereco
			appRouter.on('route:enderecos', function() {
				util.markActiveItem('enderecos');
				appRouter.pageEndereco = new PageEndereco();
				App.mainRegion.show(appRouter.pageEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Grid',
					url : 'app/enderecos'
				});
			});
	
			appRouter.on('route:newEndereco', function() {
				util.markActiveItem('enderecos');
				var formEndereco = new FormEndereco({
					model : new EnderecoModel(),
				});
				App.mainRegion.show(formEndereco);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Endereco',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/enderecos'
				});
			});
			
			appRouter.on('route:editEndereco', function(idEndereco) {
				util.markActiveItem('enderecos');
				var formEndereco = null;
				if (appRouter.pageEndereco) {
					formEndereco = new FormEndereco({
						model : appRouter.pageEndereco.enderecos.get(idEndereco),
					});
					App.mainRegion.show(formEndereco);
				} else {
					var model = new EnderecoModel({
						id : idEndereco,
					})
					model.fetch({
						success : function(model) {
							formEndereco = new FormEndereco({
								model : model,
							});
							App.mainRegion.show(formEndereco);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Enderecoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/enderecos'
					});
				}
			});
			//configuração das rotas de Estado
			appRouter.on('route:estados', function() {
				util.markActiveItem('estados');
				appRouter.pageEstado = new PageEstado();
				App.mainRegion.show(appRouter.pageEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Grid',
					url : 'app/estados'
				});
			});
	
			appRouter.on('route:newEstado', function() {
				util.markActiveItem('estados');
				var formEstado = new FormEstado({
					model : new EstadoModel(),
				});
				App.mainRegion.show(formEstado);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Estado',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/estados'
				});
			});
			
			appRouter.on('route:editEstado', function(idEstado) {
				util.markActiveItem('estados');
				var formEstado = null;
				if (appRouter.pageEstado) {
					formEstado = new FormEstado({
						model : appRouter.pageEstado.estados.get(idEstado),
					});
					App.mainRegion.show(formEstado);
				} else {
					var model = new EstadoModel({
						id : idEstado,
					})
					model.fetch({
						success : function(model) {
							formEstado = new FormEstado({
								model : model,
							});
							App.mainRegion.show(formEstado);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Estadoos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/estados'
					});
				}
			});
			//configuração das rotas de Pais
			appRouter.on('route:paiss', function() {
				util.markActiveItem('paiss');
				appRouter.pagePais = new PagePais();
				App.mainRegion.show(appRouter.pagePais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Grid',
					url : 'app/paiss'
				});
			});
	
			appRouter.on('route:newPais', function() {
				util.markActiveItem('paiss');
				var formPais = new FormPais({
					model : new PaisModel(),
				});
				App.mainRegion.show(formPais);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Pais',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/paiss'
				});
			});
			
			appRouter.on('route:editPais', function(idPais) {
				util.markActiveItem('paiss');
				var formPais = null;
				if (appRouter.pagePais) {
					formPais = new FormPais({
						model : appRouter.pagePais.paiss.get(idPais),
					});
					App.mainRegion.show(formPais);
				} else {
					var model = new PaisModel({
						id : idPais,
					})
					model.fetch({
						success : function(model) {
							formPais = new FormPais({
								model : model,
							});
							App.mainRegion.show(formPais);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Paisos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/paiss'
					});
				}
			});
			//configuração das rotas de Client
			appRouter.on('route:clients', function() {
				util.markActiveItem('clients');
				appRouter.pageClient = new PageClient();
				App.mainRegion.show(appRouter.pageClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Grid',
					url : 'app/clients'
				});
			});
	
			appRouter.on('route:newClient', function() {
				util.markActiveItem('clients');
				var formClient = new FormClient({
					model : new ClientModel(),
				});
				App.mainRegion.show(formClient);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Client',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/clients'
				});
			});
			
			appRouter.on('route:editClient', function(idClient) {
				util.markActiveItem('clients');
				var formClient = null;
				if (appRouter.pageClient) {
					formClient = new FormClient({
						model : appRouter.pageClient.clients.get(idClient),
					});
					App.mainRegion.show(formClient);
				} else {
					var model = new ClientModel({
						id : idClient,
					})
					model.fetch({
						success : function(model) {
							formClient = new FormClient({
								model : model,
							});
							App.mainRegion.show(formClient);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Clientos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/clients'
					});
				}
			});
			//configuração das rotas de Item
			appRouter.on('route:items', function() {
				util.markActiveItem('items');
				appRouter.pageItem = new PageItem();
				App.mainRegion.show(appRouter.pageItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Grid',
					url : 'app/items'
				});
			});
	
			appRouter.on('route:newItem', function() {
				util.markActiveItem('items');
				var formItem = new FormItem({
					model : new ItemModel(),
				});
				App.mainRegion.show(formItem);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Item',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/items'
				});
			});
			
			appRouter.on('route:editItem', function(idItem) {
				util.markActiveItem('items');
				var formItem = null;
				if (appRouter.pageItem) {
					formItem = new FormItem({
						model : appRouter.pageItem.items.get(idItem),
					});
					App.mainRegion.show(formItem);
				} else {
					var model = new ItemModel({
						id : idItem,
					})
					model.fetch({
						success : function(model) {
							formItem = new FormItem({
								model : model,
							});
							App.mainRegion.show(formItem);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Itemos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/items'
					});
				}
			});
			//configuração das rotas de ItemType
			appRouter.on('route:itemTypes', function() {
				util.markActiveItem('itemTypes');
				appRouter.pageItemType = new PageItemType();
				App.mainRegion.show(appRouter.pageItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Grid',
					url : 'app/itemTypes'
				});
			});
	
			appRouter.on('route:newItemType', function() {
				util.markActiveItem('itemTypes');
				var formItemType = new FormItemType({
					model : new ItemTypeModel(),
				});
				App.mainRegion.show(formItemType);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'ItemType',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/itemTypes'
				});
			});
			
			appRouter.on('route:editItemType', function(idItemType) {
				util.markActiveItem('itemTypes');
				var formItemType = null;
				if (appRouter.pageItemType) {
					formItemType = new FormItemType({
						model : appRouter.pageItemType.itemTypes.get(idItemType),
					});
					App.mainRegion.show(formItemType);
				} else {
					var model = new ItemTypeModel({
						id : idItemType,
					})
					model.fetch({
						success : function(model) {
							formItemType = new FormItemType({
								model : model,
							});
							App.mainRegion.show(formItemType);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'ItemTypeos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/itemTypes'
					});
				}
			});
			//configuração das rotas de Operation
			appRouter.on('route:operations', function() {
				util.markActiveItem('operations');
				appRouter.pageOperation = new PageOperation();
				App.mainRegion.show(appRouter.pageOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Grid',
					url : 'app/operations'
				});
			});
	
			appRouter.on('route:newOperation', function() {
				util.markActiveItem('operations');
				var formOperation = new FormOperation({
					model : new OperationModel(),
				});
				App.mainRegion.show(formOperation);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Operation',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/operations'
				});
			});
			
			appRouter.on('route:editOperation', function(idOperation) {
				util.markActiveItem('operations');
				var formOperation = null;
				if (appRouter.pageOperation) {
					formOperation = new FormOperation({
						model : appRouter.pageOperation.operations.get(idOperation),
					});
					App.mainRegion.show(formOperation);
				} else {
					var model = new OperationModel({
						id : idOperation,
					})
					model.fetch({
						success : function(model) {
							formOperation = new FormOperation({
								model : model,
							});
							App.mainRegion.show(formOperation);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Operationos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/operations'
					});
				}
			});
			//configuração das rotas de Permission
			appRouter.on('route:permissions', function() {
				util.markActiveItem('permissions');
				appRouter.pagePermission = new PagePermission();
				App.mainRegion.show(appRouter.pagePermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Grid',
					url : 'app/permissions'
				});
			});
	
			appRouter.on('route:newPermission', function() {
				util.markActiveItem('permissions');
				var formPermission = new FormPermission({
					model : new PermissionModel(),
				});
				App.mainRegion.show(formPermission);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Permission',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/permissions'
				});
			});
			
			appRouter.on('route:editPermission', function(idPermission) {
				util.markActiveItem('permissions');
				var formPermission = null;
				if (appRouter.pagePermission) {
					formPermission = new FormPermission({
						model : appRouter.pagePermission.permissions.get(idPermission),
					});
					App.mainRegion.show(formPermission);
				} else {
					var model = new PermissionModel({
						id : idPermission,
					})
					model.fetch({
						success : function(model) {
							formPermission = new FormPermission({
								model : model,
							});
							App.mainRegion.show(formPermission);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Permissionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/permissions'
					});
				}
			});
			//configuração das rotas de Role
			appRouter.on('route:roles', function() {
				util.markActiveItem('roles');
				appRouter.pageRole = new PageRole();
				App.mainRegion.show(appRouter.pageRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Grid',
					url : 'app/roles'
				});
			});
	
			appRouter.on('route:newRole', function() {
				util.markActiveItem('roles');
				var formRole = new FormRole({
					model : new RoleModel(),
				});
				App.mainRegion.show(formRole);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Role',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/roles'
				});
			});
			
			appRouter.on('route:editRole', function(idRole) {
				util.markActiveItem('roles');
				var formRole = null;
				if (appRouter.pageRole) {
					formRole = new FormRole({
						model : appRouter.pageRole.roles.get(idRole),
					});
					App.mainRegion.show(formRole);
				} else {
					var model = new RoleModel({
						id : idRole,
					})
					model.fetch({
						success : function(model) {
							formRole = new FormRole({
								model : model,
							});
							App.mainRegion.show(formRole);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Roleos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/roles'
					});
				}
			});
			//configuração das rotas de Session
			appRouter.on('route:sessions', function() {
				util.markActiveItem('sessions');
				appRouter.pageSession = new PageSession();
				App.mainRegion.show(appRouter.pageSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Grid',
					url : 'app/sessions'
				});
			});
	
			appRouter.on('route:newSession', function() {
				util.markActiveItem('sessions');
				var formSession = new FormSession({
					model : new SessionModel(),
				});
				App.mainRegion.show(formSession);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'Session',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/sessions'
				});
			});
			
			appRouter.on('route:editSession', function(idSession) {
				util.markActiveItem('sessions');
				var formSession = null;
				if (appRouter.pageSession) {
					formSession = new FormSession({
						model : appRouter.pageSession.sessions.get(idSession),
					});
					App.mainRegion.show(formSession);
				} else {
					var model = new SessionModel({
						id : idSession,
					})
					model.fetch({
						success : function(model) {
							formSession = new FormSession({
								model : model,
							});
							App.mainRegion.show(formSession);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Sessionos',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/sessions'
					});
				}
			});
			//configuração das rotas de User
			appRouter.on('route:users', function() {
				util.markActiveItem('users');
				appRouter.pageUser = new PageUser();
				App.mainRegion.show(appRouter.pageUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Grid',
					url : 'app/users'
				});
			});
	
			appRouter.on('route:newUser', function() {
				util.markActiveItem('users');
				var formUser = new FormUser({
					model : new UserModel(),
				});
				App.mainRegion.show(formUser);
				util.breadcrumb({
					iconClass : 'fa-desktop',
					itemLabel : 'User',
					itemSubFolderName : 'Formulário de cadastro',
					url : 'app/users'
				});
			});
			
			appRouter.on('route:editUser', function(idUser) {
				util.markActiveItem('users');
				var formUser = null;
				if (appRouter.pageUser) {
					formUser = new FormUser({
						model : appRouter.pageUser.users.get(idUser),
					});
					App.mainRegion.show(formUser);
				} else {
					var model = new UserModel({
						id : idUser,
					})
					model.fetch({
						success : function(model) {
							formUser = new FormUser({
								model : model,
							});
							App.mainRegion.show(formUser);
						},
						error : function(x, y, z) {
							console.error(x, y, z);
						}
					})
					util.breadcrumb({
						iconClass : 'fa-calendar',
						itemLabel : 'Useros',
						itemSubFolderName : 'Formulário de atualização',
						url : 'app/users'
					});
				}
			});
			

	############################################################################
						Menu de cadastros
	############################################################################
			<li id="alunos" class="">
				<a href="#app/alunos">
					<i class="menu-icon fa fa-caret-right"></i>
					Aluno
				</a>
				<b class="arrow"></b>
			</li>
			<li id="disciplinas" class="">
				<a href="#app/disciplinas">
					<i class="menu-icon fa fa-caret-right"></i>
					Disciplina
				</a>
				<b class="arrow"></b>
			</li>
			<li id="listas" class="">
				<a href="#app/listas">
					<i class="menu-icon fa fa-caret-right"></i>
					Lista
				</a>
				<b class="arrow"></b>
			</li>
			<li id="professors" class="">
				<a href="#app/professors">
					<i class="menu-icon fa fa-caret-right"></i>
					Professor
				</a>
				<b class="arrow"></b>
			</li>
			<li id="questaos" class="">
				<a href="#app/questaos">
					<i class="menu-icon fa fa-caret-right"></i>
					Questão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="questaoDesafios" class="">
				<a href="#app/questaoDesafios">
					<i class="menu-icon fa fa-caret-right"></i>
					Questão Desafio
				</a>
				<b class="arrow"></b>
			</li>
			<li id="rankings" class="">
				<a href="#app/rankings">
					<i class="menu-icon fa fa-caret-right"></i>
					Ranking
				</a>
				<b class="arrow"></b>
			</li>
			<li id="bairros" class="">
				<a href="#app/bairros">
					<i class="menu-icon fa fa-caret-right"></i>
					Bairro
				</a>
				<b class="arrow"></b>
			</li>
			<li id="ceps" class="">
				<a href="#app/ceps">
					<i class="menu-icon fa fa-caret-right"></i>
					Cep
				</a>
				<b class="arrow"></b>
			</li>
			<li id="cidades" class="">
				<a href="#app/cidades">
					<i class="menu-icon fa fa-caret-right"></i>
					Cidade
				</a>
				<b class="arrow"></b>
			</li>
			<li id="enderecos" class="">
				<a href="#app/enderecos">
					<i class="menu-icon fa fa-caret-right"></i>
					Endereco
				</a>
				<b class="arrow"></b>
			</li>
			<li id="estados" class="">
				<a href="#app/estados">
					<i class="menu-icon fa fa-caret-right"></i>
					Estado
				</a>
				<b class="arrow"></b>
			</li>
			<li id="paiss" class="">
				<a href="#app/paiss">
					<i class="menu-icon fa fa-caret-right"></i>
					Pais
				</a>
				<b class="arrow"></b>
			</li>
			<li id="clients" class="">
				<a href="#app/clients">
					<i class="menu-icon fa fa-caret-right"></i>
					Cliente
				</a>
				<b class="arrow"></b>
			</li>
			<li id="items" class="">
				<a href="#app/items">
					<i class="menu-icon fa fa-caret-right"></i>
					Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="itemTypes" class="">
				<a href="#app/itemTypes">
					<i class="menu-icon fa fa-caret-right"></i>
					Tipo de Item
				</a>
				<b class="arrow"></b>
			</li>
			<li id="operations" class="">
				<a href="#app/operations">
					<i class="menu-icon fa fa-caret-right"></i>
					Operação
				</a>
				<b class="arrow"></b>
			</li>
			<li id="permissions" class="">
				<a href="#app/permissions">
					<i class="menu-icon fa fa-caret-right"></i>
					Permissão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="roles" class="">
				<a href="#app/roles">
					<i class="menu-icon fa fa-caret-right"></i>
					Papel
				</a>
				<b class="arrow"></b>
			</li>
			<li id="sessions" class="">
				<a href="#app/sessions">
					<i class="menu-icon fa fa-caret-right"></i>
					Sessão
				</a>
				<b class="arrow"></b>
			</li>
			<li id="users" class="">
				<a href="#app/users">
					<i class="menu-icon fa fa-caret-right"></i>
					Usuário
				</a>
				<b class="arrow"></b>
			</li>
		
	############################################################################
						Parser json-> objeto objeto -> json
	############################################################################
	//converte de entidade para json
	public static JsonAluno toJson(Aluno aluno) {
		JsonAluno jsonAluno = new JsonAluno();
		
		jsonAluno.setId(aluno.getId());
	    jsonAluno.setNome(aluno.getNome());
		jsonAluno.setUsuario(toJson(aluno.getUsuario()));		
		return jsonAluno;
	}

	public static Aluno toEntity(JsonAluno jsonAluno) {
		Aluno aluno = new Aluno();
		
		aluno.setId(jsonAluno.getId());
		aluno.setNome(jsonAluno.getNome());
		aluno.setUsuario(toEntity(jsonAluno.getUsuario()));					
		return aluno;
	}		
	
	public static List<JsonAluno> toListJsonAlunos(List<Aluno> all) {
		List<JsonAluno> jsonAlunos = new ArrayList<JsonAluno>();
		for (Aluno aluno : all) {
			jsonAlunos.add(toJson(aluno));
		}
		return jsonAlunos;
	}
	//converte de entidade para json
	public static JsonDisciplina toJson(Disciplina disciplina) {
		JsonDisciplina jsonDisciplina = new JsonDisciplina();
		
		jsonDisciplina.setId(disciplina.getId());
	    jsonDisciplina.setNome(disciplina.getNome());
		jsonDisciplina.setProfessor(toJson(disciplina.getProfessor()));		
		return jsonDisciplina;
	}

	public static Disciplina toEntity(JsonDisciplina jsonDisciplina) {
		Disciplina disciplina = new Disciplina();
		
		disciplina.setId(jsonDisciplina.getId());
		disciplina.setNome(jsonDisciplina.getNome());
		disciplina.setProfessor(toEntity(jsonDisciplina.getProfessor()));					
		return disciplina;
	}		
	
	public static List<JsonDisciplina> toListJsonDisciplinas(List<Disciplina> all) {
		List<JsonDisciplina> jsonDisciplinas = new ArrayList<JsonDisciplina>();
		for (Disciplina disciplina : all) {
			jsonDisciplinas.add(toJson(disciplina));
		}
		return jsonDisciplinas;
	}
	//converte de entidade para json
	public static JsonLista toJson(Lista lista) {
		JsonLista jsonLista = new JsonLista();
		
		jsonLista.setId(lista.getId());
	    jsonLista.setNome(lista.getNome());
		jsonLista.setDisciplina(toJson(lista.getDisciplina()));		
		return jsonLista;
	}

	public static Lista toEntity(JsonLista jsonLista) {
		Lista lista = new Lista();
		
		lista.setId(jsonLista.getId());
		lista.setNome(jsonLista.getNome());
		lista.setDisciplina(toEntity(jsonLista.getDisciplina()));					
		return lista;
	}		
	
	public static List<JsonLista> toListJsonListas(List<Lista> all) {
		List<JsonLista> jsonListas = new ArrayList<JsonLista>();
		for (Lista lista : all) {
			jsonListas.add(toJson(lista));
		}
		return jsonListas;
	}
	//converte de entidade para json
	public static JsonProfessor toJson(Professor professor) {
		JsonProfessor jsonProfessor = new JsonProfessor();
		
		jsonProfessor.setId(professor.getId());
	    jsonProfessor.setNome(professor.getNome());
		jsonProfessor.setUsuario(toJson(professor.getUsuario()));		
		return jsonProfessor;
	}

	public static Professor toEntity(JsonProfessor jsonProfessor) {
		Professor professor = new Professor();
		
		professor.setId(jsonProfessor.getId());
		professor.setNome(jsonProfessor.getNome());
		professor.setUsuario(toEntity(jsonProfessor.getUsuario()));					
		return professor;
	}		
	
	public static List<JsonProfessor> toListJsonProfessors(List<Professor> all) {
		List<JsonProfessor> jsonProfessors = new ArrayList<JsonProfessor>();
		for (Professor professor : all) {
			jsonProfessors.add(toJson(professor));
		}
		return jsonProfessors;
	}
	//converte de entidade para json
	public static JsonQuestao toJson(Questao questao) {
		JsonQuestao jsonQuestao = new JsonQuestao();
		
		jsonQuestao.setId(questao.getId());
	    jsonQuestao.setPergunta(questao.getPergunta());
	    jsonQuestao.setItemA(questao.getItemA());
	    jsonQuestao.setItemB(questao.getItemB());
	    jsonQuestao.setItemC(questao.getItemC());
	    jsonQuestao.setItemD(questao.getItemD());
	    jsonQuestao.setItemCorreto(questao.getItemCorreto());
	    jsonQuestao.setPontos(questao.getPontos());
		jsonQuestao.setLista(toJson(questao.getLista()));		
		return jsonQuestao;
	}

	public static Questao toEntity(JsonQuestao jsonQuestao) {
		Questao questao = new Questao();
		
		questao.setId(jsonQuestao.getId());
		questao.setPergunta(jsonQuestao.getPergunta());
		questao.setItemA(jsonQuestao.getItemA());
		questao.setItemB(jsonQuestao.getItemB());
		questao.setItemC(jsonQuestao.getItemC());
		questao.setItemD(jsonQuestao.getItemD());
		questao.setItemCorreto(jsonQuestao.getItemCorreto());
		questao.setPontos(jsonQuestao.getPontos());
		questao.setLista(toEntity(jsonQuestao.getLista()));					
		return questao;
	}		
	
	public static List<JsonQuestao> toListJsonQuestaos(List<Questao> all) {
		List<JsonQuestao> jsonQuestaos = new ArrayList<JsonQuestao>();
		for (Questao questao : all) {
			jsonQuestaos.add(toJson(questao));
		}
		return jsonQuestaos;
	}
	//converte de entidade para json
	public static JsonQuestaoDesafio toJson(QuestaoDesafio questaoDesafio) {
		JsonQuestaoDesafio jsonQuestaoDesafio = new JsonQuestaoDesafio();
		
		jsonQuestaoDesafio.setId(questaoDesafio.getId());
	    jsonQuestaoDesafio.setPontos(questaoDesafio.getPontos());
	    jsonQuestaoDesafio.setPergunta(questaoDesafio.getPergunta());
	    jsonQuestaoDesafio.setResposta(questaoDesafio.getResposta());
		jsonQuestaoDesafio.setLista(toJson(questaoDesafio.getLista()));		
		return jsonQuestaoDesafio;
	}

	public static QuestaoDesafio toEntity(JsonQuestaoDesafio jsonQuestaoDesafio) {
		QuestaoDesafio questaoDesafio = new QuestaoDesafio();
		
		questaoDesafio.setId(jsonQuestaoDesafio.getId());
		questaoDesafio.setPontos(jsonQuestaoDesafio.getPontos());
		questaoDesafio.setPergunta(jsonQuestaoDesafio.getPergunta());
		questaoDesafio.setResposta(jsonQuestaoDesafio.getResposta());
		questaoDesafio.setLista(toEntity(jsonQuestaoDesafio.getLista()));					
		return questaoDesafio;
	}		
	
	public static List<JsonQuestaoDesafio> toListJsonQuestaoDesafios(List<QuestaoDesafio> all) {
		List<JsonQuestaoDesafio> jsonQuestaoDesafios = new ArrayList<JsonQuestaoDesafio>();
		for (QuestaoDesafio questaoDesafio : all) {
			jsonQuestaoDesafios.add(toJson(questaoDesafio));
		}
		return jsonQuestaoDesafios;
	}
	//converte de entidade para json
	public static JsonRanking toJson(Ranking ranking) {
		JsonRanking jsonRanking = new JsonRanking();
		
		jsonRanking.setId(ranking.getId());
	    jsonRanking.setPontos(ranking.getPontos());
		jsonRanking.setDisciplina(toJson(ranking.getDisciplina()));		
		jsonRanking.setAluno(toJson(ranking.getAluno()));		
		return jsonRanking;
	}

	public static Ranking toEntity(JsonRanking jsonRanking) {
		Ranking ranking = new Ranking();
		
		ranking.setId(jsonRanking.getId());
		ranking.setPontos(jsonRanking.getPontos());
		ranking.setDisciplina(toEntity(jsonRanking.getDisciplina()));					
		ranking.setAluno(toEntity(jsonRanking.getAluno()));					
		return ranking;
	}		
	
	public static List<JsonRanking> toListJsonRankings(List<Ranking> all) {
		List<JsonRanking> jsonRankings = new ArrayList<JsonRanking>();
		for (Ranking ranking : all) {
			jsonRankings.add(toJson(ranking));
		}
		return jsonRankings;
	}
	//converte de entidade para json
	public static JsonBairro toJson(Bairro bairro) {
		JsonBairro jsonBairro = new JsonBairro();
		
		jsonBairro.setId(bairro.getId());
	    jsonBairro.setNome(bairro.getNome());
		jsonBairro.setCidade(toJson(bairro.getCidade()));		
		jsonBairro.setEstado(toJson(bairro.getEstado()));		
		return jsonBairro;
	}

	public static Bairro toEntity(JsonBairro jsonBairro) {
		Bairro bairro = new Bairro();
		
		bairro.setId(jsonBairro.getId());
		bairro.setNome(jsonBairro.getNome());
		bairro.setCidade(toEntity(jsonBairro.getCidade()));					
		bairro.setEstado(toEntity(jsonBairro.getEstado()));					
		return bairro;
	}		
	
	public static List<JsonBairro> toListJsonBairros(List<Bairro> all) {
		List<JsonBairro> jsonBairros = new ArrayList<JsonBairro>();
		for (Bairro bairro : all) {
			jsonBairros.add(toJson(bairro));
		}
		return jsonBairros;
	}
	//converte de entidade para json
	public static JsonCep toJson(Cep cep) {
		JsonCep jsonCep = new JsonCep();
		
		jsonCep.setId(cep.getId());
	    jsonCep.setLogradouro(cep.getLogradouro());
	    jsonCep.setNumero(cep.getNumero());
		jsonCep.setBairro(toJson(cep.getBairro()));		
		jsonCep.setCidade(toJson(cep.getCidade()));		
		jsonCep.setEstado(toJson(cep.getEstado()));		
		return jsonCep;
	}

	public static Cep toEntity(JsonCep jsonCep) {
		Cep cep = new Cep();
		
		cep.setId(jsonCep.getId());
		cep.setLogradouro(jsonCep.getLogradouro());
		cep.setNumero(jsonCep.getNumero());
		cep.setBairro(toEntity(jsonCep.getBairro()));					
		cep.setCidade(toEntity(jsonCep.getCidade()));					
		cep.setEstado(toEntity(jsonCep.getEstado()));					
		return cep;
	}		
	
	public static List<JsonCep> toListJsonCeps(List<Cep> all) {
		List<JsonCep> jsonCeps = new ArrayList<JsonCep>();
		for (Cep cep : all) {
			jsonCeps.add(toJson(cep));
		}
		return jsonCeps;
	}
	//converte de entidade para json
	public static JsonCidade toJson(Cidade cidade) {
		JsonCidade jsonCidade = new JsonCidade();
		
		jsonCidade.setId(cidade.getId());
	    jsonCidade.setNome(cidade.getNome());
	    jsonCidade.setCep(cidade.getCep());
		jsonCidade.setEstado(toJson(cidade.getEstado()));		
		return jsonCidade;
	}

	public static Cidade toEntity(JsonCidade jsonCidade) {
		Cidade cidade = new Cidade();
		
		cidade.setId(jsonCidade.getId());
		cidade.setNome(jsonCidade.getNome());
		cidade.setCep(jsonCidade.getCep());
		cidade.setEstado(toEntity(jsonCidade.getEstado()));					
		return cidade;
	}		
	
	public static List<JsonCidade> toListJsonCidades(List<Cidade> all) {
		List<JsonCidade> jsonCidades = new ArrayList<JsonCidade>();
		for (Cidade cidade : all) {
			jsonCidades.add(toJson(cidade));
		}
		return jsonCidades;
	}
	//converte de entidade para json
	public static JsonEndereco toJson(Endereco endereco) {
		JsonEndereco jsonEndereco = new JsonEndereco();
		
		jsonEndereco.setId(endereco.getId());
	    jsonEndereco.setComplemento(endereco.getComplemento());
	    jsonEndereco.setNumero(endereco.getNumero());
		jsonEndereco.setCep(toJson(endereco.getCep()));		
		return jsonEndereco;
	}

	public static Endereco toEntity(JsonEndereco jsonEndereco) {
		Endereco endereco = new Endereco();
		
		endereco.setId(jsonEndereco.getId());
		endereco.setComplemento(jsonEndereco.getComplemento());
		endereco.setNumero(jsonEndereco.getNumero());
		endereco.setCep(toEntity(jsonEndereco.getCep()));					
		return endereco;
	}		
	
	public static List<JsonEndereco> toListJsonEnderecos(List<Endereco> all) {
		List<JsonEndereco> jsonEnderecos = new ArrayList<JsonEndereco>();
		for (Endereco endereco : all) {
			jsonEnderecos.add(toJson(endereco));
		}
		return jsonEnderecos;
	}
	//converte de entidade para json
	public static JsonEstado toJson(Estado estado) {
		JsonEstado jsonEstado = new JsonEstado();
		
		jsonEstado.setId(estado.getId());
	    jsonEstado.setNome(estado.getNome());
	    jsonEstado.setFaixaCep1Ini(estado.getFaixaCep1Ini());
	    jsonEstado.setFaixaCep1Fim(estado.getFaixaCep1Fim());
	    jsonEstado.setFaixaCep2Ini(estado.getFaixaCep2Ini());
	    jsonEstado.setFaixaCep2Fim(estado.getFaixaCep2Fim());
		return jsonEstado;
	}

	public static Estado toEntity(JsonEstado jsonEstado) {
		Estado estado = new Estado();
		
		estado.setId(jsonEstado.getId());
		estado.setNome(jsonEstado.getNome());
		estado.setFaixaCep1Ini(jsonEstado.getFaixaCep1Ini());
		estado.setFaixaCep1Fim(jsonEstado.getFaixaCep1Fim());
		estado.setFaixaCep2Ini(jsonEstado.getFaixaCep2Ini());
		estado.setFaixaCep2Fim(jsonEstado.getFaixaCep2Fim());
		return estado;
	}		
	
	public static List<JsonEstado> toListJsonEstados(List<Estado> all) {
		List<JsonEstado> jsonEstados = new ArrayList<JsonEstado>();
		for (Estado estado : all) {
			jsonEstados.add(toJson(estado));
		}
		return jsonEstados;
	}
	//converte de entidade para json
	public static JsonPais toJson(Pais pais) {
		JsonPais jsonPais = new JsonPais();
		
		jsonPais.setId(pais.getId());
	    jsonPais.setCodigo(pais.getCodigo());
	    jsonPais.setNome(pais.getNome());
		return jsonPais;
	}

	public static Pais toEntity(JsonPais jsonPais) {
		Pais pais = new Pais();
		
		pais.setId(jsonPais.getId());
		pais.setCodigo(jsonPais.getCodigo());
		pais.setNome(jsonPais.getNome());
		return pais;
	}		
	
	public static List<JsonPais> toListJsonPaiss(List<Pais> all) {
		List<JsonPais> jsonPaiss = new ArrayList<JsonPais>();
		for (Pais pais : all) {
			jsonPaiss.add(toJson(pais));
		}
		return jsonPaiss;
	}
	//converte de entidade para json
	public static JsonClient toJson(Client client) {
		JsonClient jsonClient = new JsonClient();
		
		jsonClient.setId(client.getId());
	    jsonClient.setLogo(client.getLogo());
	    jsonClient.setName(client.getName());
	    jsonClient.setCnpj(client.getCnpj());
	    jsonClient.setPhoneNumber(client.getPhoneNumber());
	    jsonClient.setCorporateName(client.getCorporateName());
		return jsonClient;
	}

	public static Client toEntity(JsonClient jsonClient) {
		Client client = new Client();
		
		client.setId(jsonClient.getId());
		client.setLogo(jsonClient.getLogo());
		client.setName(jsonClient.getName());
		client.setCnpj(jsonClient.getCnpj());
		client.setPhoneNumber(jsonClient.getPhoneNumber());
		client.setCorporateName(jsonClient.getCorporateName());
		return client;
	}		
	
	public static List<JsonClient> toListJsonClients(List<Client> all) {
		List<JsonClient> jsonClients = new ArrayList<JsonClient>();
		for (Client client : all) {
			jsonClients.add(toJson(client));
		}
		return jsonClients;
	}
	//converte de entidade para json
	public static JsonItem toJson(Item item) {
		JsonItem jsonItem = new JsonItem();
		
		jsonItem.setId(item.getId());
	    jsonItem.setName(item.getName());
	    jsonItem.setDescription(item.getDescription());
		jsonItem.setType(toJson(item.getType()));		
		return jsonItem;
	}

	public static Item toEntity(JsonItem jsonItem) {
		Item item = new Item();
		
		item.setId(jsonItem.getId());
		item.setName(jsonItem.getName());
		item.setDescription(jsonItem.getDescription());
		item.setType(toEntity(jsonItem.getType()));					
		return item;
	}		
	
	public static List<JsonItem> toListJsonItems(List<Item> all) {
		List<JsonItem> jsonItems = new ArrayList<JsonItem>();
		for (Item item : all) {
			jsonItems.add(toJson(item));
		}
		return jsonItems;
	}
	//converte de entidade para json
	public static JsonItemType toJson(ItemType itemType) {
		JsonItemType jsonItemType = new JsonItemType();
		
		jsonItemType.setId(itemType.getId());
	    jsonItemType.setName(itemType.getName());
	    jsonItemType.setDescription(itemType.getDescription());
		return jsonItemType;
	}

	public static ItemType toEntity(JsonItemType jsonItemType) {
		ItemType itemType = new ItemType();
		
		itemType.setId(jsonItemType.getId());
		itemType.setName(jsonItemType.getName());
		itemType.setDescription(jsonItemType.getDescription());
		return itemType;
	}		
	
	public static List<JsonItemType> toListJsonItemTypes(List<ItemType> all) {
		List<JsonItemType> jsonItemTypes = new ArrayList<JsonItemType>();
		for (ItemType itemType : all) {
			jsonItemTypes.add(toJson(itemType));
		}
		return jsonItemTypes;
	}
	//converte de entidade para json
	public static JsonOperation toJson(Operation operation) {
		JsonOperation jsonOperation = new JsonOperation();
		
		jsonOperation.setId(operation.getId());
	    jsonOperation.setName(operation.getName());
	    jsonOperation.setCanEdit(operation.getCanEdit());
	    jsonOperation.setCanRead(operation.getCanRead());
	    jsonOperation.setCanUpdate(operation.getCanUpdate());
	    jsonOperation.setCanDelete(operation.getCanDelete());
	    jsonOperation.setCanExecute(operation.getCanExecute());
		return jsonOperation;
	}

	public static Operation toEntity(JsonOperation jsonOperation) {
		Operation operation = new Operation();
		
		operation.setId(jsonOperation.getId());
		operation.setName(jsonOperation.getName());
		operation.setCanEdit(jsonOperation.getCanEdit());
		operation.setCanRead(jsonOperation.getCanRead());
		operation.setCanUpdate(jsonOperation.getCanUpdate());
		operation.setCanDelete(jsonOperation.getCanDelete());
		operation.setCanExecute(jsonOperation.getCanExecute());
		return operation;
	}		
	
	public static List<JsonOperation> toListJsonOperations(List<Operation> all) {
		List<JsonOperation> jsonOperations = new ArrayList<JsonOperation>();
		for (Operation operation : all) {
			jsonOperations.add(toJson(operation));
		}
		return jsonOperations;
	}
	//converte de entidade para json
	public static JsonPermission toJson(Permission permission) {
		JsonPermission jsonPermission = new JsonPermission();
		
		jsonPermission.setId(permission.getId());
	    jsonPermission.setName(permission.getName());
		jsonPermission.setOperation(toJson(permission.getOperation()));		
		jsonPermission.setItem(toJson(permission.getItem()));		
		return jsonPermission;
	}

	public static Permission toEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		
		permission.setId(jsonPermission.getId());
		permission.setName(jsonPermission.getName());
		permission.setOperation(toEntity(jsonPermission.getOperation()));					
		permission.setItem(toEntity(jsonPermission.getItem()));					
		return permission;
	}		
	
	public static List<JsonPermission> toListJsonPermissions(List<Permission> all) {
		List<JsonPermission> jsonPermissions = new ArrayList<JsonPermission>();
		for (Permission permission : all) {
			jsonPermissions.add(toJson(permission));
		}
		return jsonPermissions;
	}
	//converte de entidade para json
	public static JsonRole toJson(Role role) {
		JsonRole jsonRole = new JsonRole();
		
		jsonRole.setId(role.getId());
	    jsonRole.setAuthority(role.getAuthority());
	    jsonRole.setDescription(role.getDescription());
		return jsonRole;
	}

	public static Role toEntity(JsonRole jsonRole) {
		Role role = new Role();
		
		role.setId(jsonRole.getId());
		role.setAuthority(jsonRole.getAuthority());
		role.setDescription(jsonRole.getDescription());
		return role;
	}		
	
	public static List<JsonRole> toListJsonRoles(List<Role> all) {
		List<JsonRole> jsonRoles = new ArrayList<JsonRole>();
		for (Role role : all) {
			jsonRoles.add(toJson(role));
		}
		return jsonRoles;
	}
	//converte de entidade para json
	public static JsonSession toJson(Session session) {
		JsonSession jsonSession = new JsonSession();
		
		jsonSession.setId(session.getId());
	    jsonSession.setName(session.getName());
	    jsonSession.setCreationDate(DateUtil.localDateTimeAsString(session.getCreationDate()));
		jsonSession.setUser(toJson(session.getUser()));		
		return jsonSession;
	}

	public static Session toEntity(JsonSession jsonSession) {
		Session session = new Session();
		
		session.setId(jsonSession.getId());
		session.setName(jsonSession.getName());
	    session.setCreationDate(DateUtil.stringAsLocalDateTime(jsonSession.getCreationDate()));
		session.setUser(toEntity(jsonSession.getUser()));					
		return session;
	}		
	
	public static List<JsonSession> toListJsonSessions(List<Session> all) {
		List<JsonSession> jsonSessions = new ArrayList<JsonSession>();
		for (Session session : all) {
			jsonSessions.add(toJson(session));
		}
		return jsonSessions;
	}
	//converte de entidade para json
	public static JsonUser toJson(User user) {
		JsonUser jsonUser = new JsonUser();
		
		jsonUser.setId(user.getId());
	    jsonUser.setName(user.getName());
	    jsonUser.setUsername(user.getUsername());
	    jsonUser.setPassword(user.getPassword());
	    jsonUser.setEnable(user.getEnable());
	    jsonUser.setImage(user.getImage());
		jsonUser.setOwner(toJson(user.getOwner()));		
		return jsonUser;
	}

	public static User toEntity(JsonUser jsonUser) {
		User user = new User();
		
		user.setId(jsonUser.getId());
		user.setName(jsonUser.getName());
		user.setUsername(jsonUser.getUsername());
		user.setPassword(jsonUser.getPassword());
		user.setEnable(jsonUser.getEnable());
		user.setImage(jsonUser.getImage());
		user.setOwner(toEntity(jsonUser.getOwner()));					
		return user;
	}		
	
	public static List<JsonUser> toListJsonUsers(List<User> all) {
		List<JsonUser> jsonUsers = new ArrayList<JsonUser>();
		for (User user : all) {
			jsonUsers.add(toJson(user));
		}
		return jsonUsers;
	}

	
